// Enhanced Geek Projects Methodology - Tier 3 Database Schema
// Enterprise SaaS Application with Multi-tenancy

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Use PostgreSQL for production
  url      = env("DATABASE_URL")
}

// Authentication & User Management
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  
  // Enterprise fields
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  subscriptions Subscription[]
  
  @@index([organizationId])
  @@index([email])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Multi-tenant Organization System
model Organization {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  domain      String?  @unique
  plan        Plan     @default(STARTER)
  
  // Settings
  settings    Json?
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  users       User[]
  projects    Project[]
  subscriptions Subscription[]
  
  @@index([slug])
  @@index([domain])
}

// Project Management
model Project {
  id             String        @id @default(cuid())
  name           String
  description    String?
  status         ProjectStatus @default(ACTIVE)
  
  // Ownership
  userId         String
  user           User          @relation(fields: [userId], references: [id])
  organizationId String
  organization   Organization  @relation(fields: [organizationId], references: [id])
  
  // Timestamps
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  
  @@index([userId])
  @@index([organizationId])
  @@index([status])
}

// Subscription & Billing
model Subscription {
  id                 String             @id @default(cuid())
  
  // Stripe integration
  stripeSubscriptionId String?          @unique
  stripeCustomerId     String?          @unique
  stripePriceId        String?
  stripeCurrentPeriodEnd DateTime?
  
  // Subscription details
  plan               Plan               @default(STARTER)
  status             SubscriptionStatus @default(ACTIVE)
  
  // Ownership
  userId             String
  user               User               @relation(fields: [userId], references: [id])
  organizationId     String
  organization       Organization       @relation(fields: [organizationId], references: [id])
  
  // Timestamps
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  
  @@index([userId])
  @@index([organizationId])
  @@index([stripeSubscriptionId])
}

// Audit Log for Enterprise
model AuditLog {
  id        String   @id @default(cuid())
  action    String   // CREATE, UPDATE, DELETE, etc.
  resource  String   // User, Project, etc.
  resourceId String
  userId    String?
  metadata  Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  
  @@index([userId])
  @@index([resource])
  @@index([createdAt])
}

// Enums
enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum Plan {
  STARTER
  PRO
  ENTERPRISE
}

enum ProjectStatus {
  ACTIVE
  ARCHIVED
  DELETED
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
}